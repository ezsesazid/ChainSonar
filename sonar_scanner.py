import os
import requests
import time
import argparse
from datetime import datetime
from dotenv import load_dotenv
from plyer import notification
import sys

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
ETHERSCAN_API_KEY = os.getenv('ETHERSCAN_API_KEY')
API_URL = 'https://api.etherscan.io/api'
# –ê–¥—Ä–µ—Å–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–æ–≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
WATCHED_TOKENS = {
    '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2': {'symbol': 'WETH', 'decimals': 18},
    '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48': {'symbol': 'USDC', 'decimals': 6},
    '0xdAC17F958D2ee523a2206206994597C13D831ec7': {'symbol': 'USDT', 'decimals': 6},
}

class ChainSonar:
    def __init__(self, eth_threshold, stable_threshold):
        if not ETHERSCAN_API_KEY:
            raise EnvironmentError("API-–∫–ª—é—á ETHERSCAN_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à .env —Ñ–∞–π–ª.")
        
        self.eth_threshold = eth_threshold
        self.stable_threshold = stable_threshold
        self.session = requests.Session()
        self.targets = self.load_targets()
        self.last_seen_block = {}

    def load_targets(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–¥—Ä–µ—Å–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ whales.txt."""
        targets = {}
        try:
            with open('whales.txt', 'r') as f:
                for line in f:
                    if not line.strip() or line.startswith('#'):
                        continue
                    parts = [p.strip() for p in line.split(',')]
                    address = parts[0].lower()
                    name = parts[1] if len(parts) > 1 else address[:6] + '...' + address[-4:]
                    targets[address] = {'name': name}
                    self.last_seen_block[address] = None
            if not targets:
                raise FileNotFoundError
            self.log(f"–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è {len(targets)} –∞–¥—Ä–µ—Å–æ–≤.")
            return targets
        except FileNotFoundError:
            print("[!] –û—à–∏–±–∫–∞: —Ñ–∞–π–ª 'whales.txt' –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –ø—É—Å—Ç. –°–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ –∏ –¥–æ–±–∞–≤—å—Ç–µ –∞–¥—Ä–µ—Å–∞.", file=sys.stderr)
            sys.exit(1)

    def fetch_transactions(self, address):
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ (–Ω–∞—Ç–∏–≤–Ω—ã–µ –∏ —Ç–æ–∫–µ–Ω–æ–≤) –¥–ª—è –∞–¥—Ä–µ—Å–∞."""
        # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏ –Ω–∞—Ç–∏–≤–Ω—ã–µ ETH, –∏ ERC20
        params = {
            'module': 'account',
            'action': 'txlist', # –î–ª—è –Ω–∞—Ç–∏–≤–Ω—ã—Ö ETH
            'address': address,
            'startblock': self.last_seen_block[address],
            'endblock': '99999999',
            'sort': 'desc',
            'apikey': ETHERSCAN_API_KEY
        }
        eth_txs = self.session.get(API_URL, params=params).json().get('result', [])
        
        params['action'] = 'tokentx' # –î–ª—è —Ç–æ–∫–µ–Ω–æ–≤ ERC20
        token_txs = self.session.get(API_URL, params=params).json().get('result', [])

        return (eth_txs or []) + (token_txs or [])

    def send_notification(self, title, message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."""
        try:
            notification.notify(title=title, message=message, app_name='ChainSonar', timeout=30)
        except Exception as e:
            print(f"[!] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: {e}", file=sys.stderr)

    def log(self, message):
        print(f"[{datetime.now().strftime('%H:%M:%S')}] {message}")

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Ä–∞–±–æ—Ç—ã —Å–∫–∞–Ω–µ—Ä–∞."""
        self.log(f"üì° ChainSonar –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
        self.log(f"–ü–æ—Ä–æ–≥ ETH: {self.eth_threshold}, –ü–æ—Ä–æ–≥ —Å—Ç–µ–π–±–ª–æ–≤: {self.stable_threshold}.")

        try:
            while True:
                for address, data in self.targets.items():
                    txs = self.fetch_transactions(address)
                    if not txs:
                        continue
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–∏–¥–µ–Ω–Ω—ã–π –±–ª–æ–∫, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å—Ç–∞—Ä—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                    self.last_seen_block[address] = txs[0]['blockNumber']

                    for tx in txs:
                        # –ù–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç —Ç–æ–ª—å–∫–æ –≤—Ö–æ–¥—è—â–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                        if tx['to'].lower() != address:
                            continue

                        is_native_eth = 'tokenSymbol' not in tx
                        amount = 0
                        symbol = ''
                        threshold = 0

                        if is_native_eth:
                            amount = int(tx['value']) / 10**18
                            symbol = 'ETH'
                            threshold = self.eth_threshold
                        else: # –≠—Ç–æ —Ç–æ–∫–µ–Ω
                            token_addr = tx['contractAddress'].lower()
                            if token_addr in WATCHED_TOKENS:
                                token_info = WATCHED_TOKENS[token_addr]
                                amount = int(tx['value']) / 10**token_info['decimals']
                                symbol = token_info['symbol']
                                threshold = self.eth_threshold if symbol == 'WETH' else self.stable_threshold

                        if amount >= threshold:
                            self.log("üö® –û–ë–ù–ê–†–£–ñ–ï–ù –°–ò–ì–ù–ê–õ!")
                            self.log(f"–ö–∏—Ç: {data['name']} ({address[:6]}...{address[-4:]})")
                            self.log(f"–ü–æ–ª—É—á–∏–ª: {amount:.2f} {symbol}")
                            self.log(f"Tx: https://etherscan.io/tx/{tx['hash']}")
                            
                            title = f"üì° ChainSonar: –°–∏–≥–Ω–∞–ª –æ—Ç {data['name']}!"
                            message = f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–µ—Ä–µ–≤–æ–¥ {amount:.2f} {symbol}.\n–ö–∏—Ç, –≤–æ–∑–º–æ–∂–Ω–æ, –≥–æ—Ç–æ–≤–∏—Ç—Å—è –∫ –¥–µ–π—Å—Ç–≤–∏—é."
                            self.send_notification(title, message)
                            
                    time.sleep(2) # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∫ —Ä–∞–∑–Ω—ã–º –∫–æ—à–µ–ª—å–∫–∞–º
                time.sleep(15) # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ª–Ω—ã–º–∏ —Ü–∏–∫–ª–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
        except KeyboardInterrupt:
            self.log("üì° ChainSonar –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.")
            sys.exit(0)

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="ChainSonar - –ø—Ä–æ–∞–∫—Ç–∏–≤–Ω—ã–π —Å–∫–∞–Ω–µ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–∏—Ç–æ–≤.")
    parser.add_argument("--eth-threshold", type=float, default=10.0, help="–ü–æ—Ä–æ–≥ –¥–ª—è ETH/WETH.")
    parser.add_argument("--stable-threshold", type=float, default=20000.0, help="–ü–æ—Ä–æ–≥ –¥–ª—è USDC/USDT.")
    
    args = parser.parse_args()
    
    try:
        sonar = ChainSonar(args.eth_threshold, args.stable_threshold)
        sonar.run()
    except (ValueError, EnvironmentError) as e:
        print(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}", file=sys.stderr)
